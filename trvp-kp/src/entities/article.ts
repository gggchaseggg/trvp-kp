export type Article = {
  id: string;
  title: string;
  text: string;
  author: string;
  tags: string[];
  createdAt: string; // ISO date string
  readingTimeMin?: number; // approximate reading time in minutes
  imageUrl?: string;
};

export const articlesMock: Article[] = [
  {
    id: "1",
    title: "Введение в React и @mui/joy",
    text: `@mui/joy — это набор компонентов, которые позволяют быстро собирать приятные интерфейсы без лишней кастомизации.

Он включает в себя типовую типографику, карточки, формы, сетки и навигационные элементы, которые хорошо сочетаются между собой. Благодаря продуманной системе токенов и вариантов (variant, color, size) можно добиться выразительного дизайна без написания кастомных стилей. Это особенно полезно в учебных и прототипных проектах, когда нужно сосредоточиться на содержании, а не на бесконечной настройке CSS.

В этой статье мы кратко обсудим, как собрать стартовую страницу, где отображаются карточки статей, как работать с компонентом Typography для разных смысловых уровней текста и как без боли организовать отступы при помощи Stack. Кроме того, рассмотрим, как использовать компонент Card для визуального отделения сущностей, и добавим небольшие эффекты наведения, чтобы интерфейс казался отзывчивым.

Наконец, обратим внимание на то, как компоненты Joy дружат с React Router: кликабельные карточки, страницы деталей и хлебные крошки. Всё это позволяет собрать цельный UX с минимальными усилиями.`,
    author: "Иван Иванов",
    tags: ["React", "UI", "Joy"],
    createdAt: new Date().toISOString(),
    readingTimeMin: 9,
  },
  {
    id: "2",
    title: "State и Hooks в React",
    text: `Хуки позволяют использовать состояние и другие возможности React без написания классов. Важно уметь разбивать состояние на логичные части и держать компоненты максимально простыми.

Обычно для полей формы удобно заводить независимые useState — так проще контролировать каждое значение и валидировать его по отдельности. Например, в форме регистрации мы можем хранить логин, почту, пароль и подтверждение пароля в отдельных переменных. Это делает код более очевидным и упрощает обработку ошибок (например, если пароли не совпадают, мы подсветим оба поля и выведем понятное сообщение).

Помимо локального состояния в компонентах, стоит помнить о мемоизации колбеков (useCallback) и вычисляемых значений (useMemo), чтобы избежать лишних перерисовок. Однако не стоит злоупотреблять оптимизациями преждевременно — сначала добейтесь корректной работы интерфейса, а затем измеряйте и улучшайте производительность.

Наконец, помните о читаемости: короткие функции-обработчики, говорящие имена переменных и небольшие компоненты — залог понятной кодовой базы.`,
    author: "Петр Петров",
    tags: ["React", "Hooks"],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    readingTimeMin: 11,
  },
  {
    id: "3",
    title: "Типизация компонентов с TypeScript",
    text: `TypeScript помогает избежать множества ошибок времени выполнения, добавляя статическую типизацию в ваш React‑код. Он улучшает разработческий опыт за счет автодополнения, рефакторинга и раннего обнаружения несоответствий типов.

При описании сущностей удобно начинать с базовых типов. Например, для статьи мы можем определить поля id, title, text, author, tags и метаданные (createdAt, readingTimeMin). Это упрощает использование мок‑данных и обеспечивает единообразие в компонентах списка и деталей. Если впоследствии структура изменится, IDE подскажет места, которые нужно поправить.

Для пропсов компонентов используйте интерфейсы или типы с точными контрактами. Когда компонент становится слишком общим, разбейте его на более мелкие части или примените обобщения (generics) — так вы сохраните гибкость без потери безопасности типов. Отдельно стоит уделить внимание обработке optional‑полей и null/undefined: явные проверки делают логику надежнее.

В завершение отметим, что строгая типизация — это инвестиция в поддерживаемость проекта. Чем раньше вы формализуете модель данных и интерфейсы, тем меньше сюрпризов получите на поздних этапах разработки.`,
    author: "Светлана Смирнова",
    tags: ["TypeScript", "React"],
    createdAt: new Date(Date.now() - 2 * 86400000).toISOString(),
    readingTimeMin: 10,
  },
];
